// <auto-generated />
#nullable enable
namespace MainCore.DTO
{
    public static partial class AccountMapper
    {
        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.2.0.0")]
        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(dto))]
        public static partial global::MainCore.Entities.Account? ToEntity(this global::MainCore.DTO.AccountDto? dto)
        {
            if (dto == null)
                return default;
            var target = new global::MainCore.Entities.Account();
            target.Id = ToInt(dto.Id);
            target.Username = dto.Username;
            target.Server = dto.Server;
            if (dto.Accesses != null)
            {
                target.Accesses = MapToListOfAccess(dto.Accesses);
            }
            else
            {
                target.Accesses = null;
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.2.0.0")]
        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(entity))]
        public static partial global::MainCore.DTO.AccountDto? ToDto(this global::MainCore.Entities.Account? entity)
        {
            if (entity == null)
                return default;
            var target = new global::MainCore.DTO.AccountDto();
            target.Id = ToAccountId(entity.Id);
            target.Username = entity.Username;
            target.Server = entity.Server;
            if (entity.Accesses != null)
            {
                target.Accesses = MapToListOfAccessDto(entity.Accesses);
            }
            else
            {
                target.Accesses = null;
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.2.0.0")]
        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(entities))]
        public static partial global::System.Linq.IQueryable<global::MainCore.DTO.AccountDto?>? ToDto(this global::System.Linq.IQueryable<global::MainCore.Entities.Account?>? entities)
        {
            if (entities == null)
                return default;
#nullable disable
            return System.Linq.Queryable.Select(
                entities,
                x => new global::MainCore.DTO.AccountDto()
                {
                    Id = new global::MainCore.Entities.AccountId(x.Id),
                    Username = x.Username,
                    Server = x.Server,
                    Accesses = x.Accesses != null ? global::System.Linq.Enumerable.ToList(
                        global::System.Linq.Enumerable.Select(x.Accesses, x1 => global::MainCore.DTO.AccessMapper.ToDto(x1))
                    ) : default,
                }
            );
#nullable enable
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.2.0.0")]
        private static global::System.Collections.Generic.List<global::MainCore.Entities.Access?> MapToListOfAccess(global::System.Collections.Generic.IReadOnlyCollection<global::MainCore.DTO.AccessDto?> source)
        {
            var target = new global::System.Collections.Generic.List<global::MainCore.Entities.Access?>(source.Count);
            foreach (var item in source)
            {
                target.Add(ToAccessEntity(item));
            }
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.2.0.0")]
        private static global::System.Collections.Generic.List<global::MainCore.DTO.AccessDto?> MapToListOfAccessDto(global::System.Collections.Generic.ICollection<global::MainCore.Entities.Access?> source)
        {
            var target = new global::System.Collections.Generic.List<global::MainCore.DTO.AccessDto?>(source.Count);
            foreach (var item in source)
            {
                target.Add(ToAccessDto(item));
            }
            return target;
        }
    }
}