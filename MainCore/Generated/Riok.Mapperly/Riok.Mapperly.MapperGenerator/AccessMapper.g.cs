// <auto-generated />
#nullable enable
namespace MainCore.DTO
{
    public static partial class AccessMapper
    {
        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.2.0.0")]
        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(dto))]
        public static partial global::MainCore.Entities.Access? ToEntity(this global::MainCore.DTO.AccessDto? dto)
        {
            if (dto == null)
                return default;
            var target = new global::MainCore.Entities.Access();
            target.Id = ToInt(dto.Id);
            target.Username = dto.Username;
            target.Password = dto.Password;
            target.ProxyHost = dto.ProxyHost;
            target.ProxyPort = dto.ProxyPort;
            target.ProxyUsername = dto.ProxyUsername;
            target.ProxyPassword = dto.ProxyPassword;
            target.Useragent = dto.Useragent;
            target.LastUsed = dto.LastUsed;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.2.0.0")]
        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(entity))]
        public static partial global::MainCore.DTO.AccessDto? ToDto(this global::MainCore.Entities.Access? entity)
        {
            if (entity == null)
                return default;
            var target = new global::MainCore.DTO.AccessDto();
            target.Id = ToAccessId(entity.Id);
            target.Username = entity.Username;
            target.Password = entity.Password;
            target.ProxyHost = entity.ProxyHost;
            target.ProxyPort = entity.ProxyPort;
            target.ProxyUsername = entity.ProxyUsername;
            target.ProxyPassword = entity.ProxyPassword;
            target.Useragent = entity.Useragent;
            target.LastUsed = entity.LastUsed;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.2.0.0")]
        [return: global::System.Diagnostics.CodeAnalysis.NotNullIfNotNull(nameof(entities))]
        public static partial global::System.Linq.IQueryable<global::MainCore.DTO.AccessDto?>? ToDto(this global::System.Linq.IQueryable<global::MainCore.Entities.Access?>? entities)
        {
            if (entities == null)
                return default;
#nullable disable
            return System.Linq.Queryable.Select(
                entities,
                x => new global::MainCore.DTO.AccessDto()
                {
                    Id = new(x.Id),
                    Username = x.Username,
                    Password = x.Password,
                    ProxyHost = x.ProxyHost,
                    ProxyPort = x.ProxyPort,
                    ProxyUsername = x.ProxyUsername,
                    ProxyPassword = x.ProxyPassword,
                    Useragent = x.Useragent,
                    LastUsed = x.LastUsed,
                }
            );
#nullable enable
        }
    }
}