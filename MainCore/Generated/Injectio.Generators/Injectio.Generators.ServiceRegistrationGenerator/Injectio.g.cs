// <auto-generated />
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    /// <summary>
    /// Extension methods for discovered service registrations
    /// </summary>
    public static class DiscoveredServicesExtensions
    {
        /// <summary>
        /// Adds discovered services from MainCore to the specified service collection
        /// </summary>
        /// <param name="serviceCollection">The service collection.</param>
        /// <param name="tags">The service registration tags to include.</param>
        /// <returns>The service collection</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Injectio.Generators", "5.0.0+6022b4d6e5ca0ba3f9de7f6ed4c57bf2b6cf6082")]
        public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddMainCore(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, params string[]? tags)
        {
            var tagSet = new global::System.Collections.Generic.HashSet<string>(tags ?? global::System.Linq.Enumerable.Empty<string>());

            global::MainCore.UI.ViewModels.UserControls.WaitingOverlayViewModel.Register(serviceCollection);

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.Services.IChromeDriverInstaller, global::MainCore.Services.ChromeDriverInstaller>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.Services.IChromeManager, global::MainCore.Services.ChromeManager>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped<global::MainCore.Services.IDataService, global::MainCore.Services.DataService>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.Services.IDialogService, global::MainCore.Services.DialogService>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.Services.ILogService, global::MainCore.Services.LogService>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::Serilog.Core.ILogEventSink, global::MainCore.Services.LogSink>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.Services.LogSink, global::MainCore.Services.LogSink>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Scoped<global::MainCore.Services.ISettingService, global::MainCore.Services.SettingService>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.Services.ITaskManager, global::MainCore.Services.TaskManager>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.Services.ITimerManager, global::MainCore.Services.TimerManager>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.Services.IUseragentManager, global::MainCore.Services.UseragentManager>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ObservableExceptionHandler, global::MainCore.UI.ObservableExceptionHandler>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.Stores.AccountTabStore, global::MainCore.UI.Stores.AccountTabStore>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.Stores.SelectedItemStore, global::MainCore.UI.Stores.SelectedItemStore>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.Stores.VillageTabStore, global::MainCore.UI.Stores.VillageTabStore>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.MainViewModel, global::MainCore.UI.ViewModels.MainViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.Tabs.AccountSettingViewModel, global::MainCore.UI.ViewModels.Tabs.AccountSettingViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.Tabs.AddAccountsViewModel, global::MainCore.UI.ViewModels.Tabs.AddAccountsViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.Tabs.AddAccountViewModel, global::MainCore.UI.ViewModels.Tabs.AddAccountViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.Tabs.DebugViewModel, global::MainCore.UI.ViewModels.Tabs.DebugViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.Tabs.EditAccountViewModel, global::MainCore.UI.ViewModels.Tabs.EditAccountViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.Tabs.FarmingViewModel, global::MainCore.UI.ViewModels.Tabs.FarmingViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.Tabs.NoAccountViewModel, global::MainCore.UI.ViewModels.Tabs.NoAccountViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.Tabs.Villages.BuildViewModel, global::MainCore.UI.ViewModels.Tabs.Villages.BuildViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.Tabs.Villages.InfoViewModel, global::MainCore.UI.ViewModels.Tabs.Villages.InfoViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.Tabs.Villages.NoVillageViewModel, global::MainCore.UI.ViewModels.Tabs.Villages.NoVillageViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.Tabs.Villages.VillageSettingViewModel, global::MainCore.UI.ViewModels.Tabs.Villages.VillageSettingViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.Tabs.VillageViewModel, global::MainCore.UI.ViewModels.Tabs.VillageViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.UserControls.MainLayoutViewModel, global::MainCore.UI.ViewModels.UserControls.MainLayoutViewModel>()
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Singleton<global::MainCore.UI.ViewModels.UserControls.IWaitingOverlayViewModel, global::MainCore.UI.ViewModels.UserControls.WaitingOverlayViewModel>()
            );

            return serviceCollection;
        }
    }
}
